pr:
  branches:
    include:
      - '*'

variables:
  repositoryName: $[replace(variables['Build.Repository.Name'], 'repository', '')]
  repositoryID: $[replace(variables['Build.Repository.ID'], 'repository', '')]

jobs:
- job: Validate_PR
  displayName: Validate_PR
  pool:
    vmImage: 'ubuntu-latest'

  steps:  

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
            #!/bin/bash
            set -e
            # Azure DevOps project name
            PROJECT=$(System.TeamProject)
            # Pull Request ID
            PR_ID=$(System.PullRequest.PullRequestId)
            if [ -z "$PR_ID" ]; then 
              echo "PR ID received as NULL. This could mean the build did not trigger when a PR is created. Aborting !!";
              exit
            fi
            # API URL to get work items associated with a pull request                        
            URL="$(ORG_URL)/$(System.TeamProject)/_apis/git/repositories/$(Build.Repository.Name)/pullRequests/$PR_ID/workitems?api-version=5.1"
            echo "Getting work items from : $URL"
            
            # Perform the HTTP GET request
            response=$(curl -s -u ":$(PAT)" $URL)

            # Check if the request was successful
            if [ $? -eq 0 ]; then
              echo "Work Items : $response"
              count=$(echo $response | jq -r '.count')
              echo "Work items for PR : $count"
              # Parse work item IDs from the response
              work_item_ids=$(echo $response | jq -r '.value | map(.id) | join(" ")')
              
              # Iterate over work item IDs
              for work_item_id in $work_item_ids; do
                # API URL to get work item details
                WORK_ITEM_URL="$(ORG_URL)/$PROJECT/_apis/wit/workItems/$work_item_id?api-version=5.1"
                echo "Fetching details for work item ID: $work_item_id"
                
                # Perform HTTP GET request to get work item details
                work_item_details=$(curl -s -u ":$(PAT)" $WORK_ITEM_URL)
                
                # Check if the request was successful
                if [ $? -eq 0 ]; then
                  echo "Work Item Details: $work_item_details"
                  workItemType=$(jq -r '.fields."System.WorkItemType"' <<< "$work_item_details")
                  iterationPath=$(jq -r '.fields."System.IterationPath"' <<< "$work_item_details")
                  state=$(jq -r '.fields."System.State"' <<< "$work_item_details")
                  echo "Work Item details : "
                  echo "------------------ "                  
                  echo "Work Item Type: $workItemType"
                  echo "Iteration Path: $iterationPath"
                  # Get the current year, month, and week number of month
                  year=$(date +%Y)
                  month=$(date +%b)
                  week=$((($(date +%-d)-1)/7+1))                  
                  echo "Iteration Name Derived : xnode-dev\\$year-$month-Week$week"                  
                  echo "State: $state"
                  if [[ $work_item_type == "User Story" || $work_item_type == "Bug" ]] && \
                     [[ $iteration_path == "xnode-dev\\$year-$month-Week$week" ]] && \
                     [[ $state == "Active" ]]; then
                    echo "Work Item ID: $work_item_id - Validation Passed"
                  else
                    echo "Work Item ID: $work_item_id - Validation Failed. Auto Rejecting PR!!"                    
                    pr_review_url="$ORG_URL/$PROJECT/_apis/git/repositories/$(repositoryName)/pullRequests/$PR_ID/reviewers/$(reviewer)?api-version=5.1"
                    #echo "Reject PR URL : $pr_review_url"
                    rejectPRResponse=$(curl -X PUT \
                       -H "Authorization: Basic $(echo -n ":$(PAT)" | base64)" \
                       -H "Content-Type: application/json" \
                       -d '{"hasDeclined": false,"id": "$(reviewer)","isReapprove": false,"vote": -10}' \
                       "$pr_review_url")
                    echo "Reject PR Response : $rejectPRResponse"
                    exit
                  fi
                else
                  # Print error message
                  echo "Error: Failed to fetch details for work item ID: $work_item_id."
                fi
              done
            else
              # Print error message
              echo "Error: Failed to fetch work items for pull request $PR_ID."
            fi