# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript
trigger:
  - dev
  - release-qa
  - release-demo
  - release-beta

stages:
  - stage: build
    displayName: "Build"
    jobs:
      - job: build_test
        displayName: "Build"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - task: Bash@3
            condition: and(succeeded(),eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
            displayName: "Install Node Packages"
            inputs:
              targetType: 'inline'
              script: 'cp dev.npmrc .npmrc'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: Bash@3
            condition: and(succeeded(),eq(variables['Build.SourceBranch'], 'refs/heads/release-beta'))
            displayName: "Install Node Packages"
            inputs:
              targetType: 'inline'
              script: 'cp beta.npmrc .npmrc'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: NodeTool@0
            inputs:
              versionSource: 'spec'
              versionSpec: '18.x'
            displayName: "Install Node.js"

          - task: npmAuthenticate@0
            condition: and(succeeded(),eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
            inputs:
              workingFile: .npmrc
            displayName: "Authenticate with dev Artifacts"

          - task: npmAuthenticate@0
            condition: and(succeeded(),eq(variables['Build.SourceBranch'], 'refs/heads/release-beta'))
            inputs:
              workingFile: .npmrc
            displayName: "Authenticate with app-US Artifacts"

          - task: Bash@3
            displayName: "Install Node Packages"
            inputs:
              targetType: 'inline'
              script: 'npm i navi-web --force'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: Bash@3
            displayName: "Install Node Packages"
            inputs:
              targetType: 'inline'
              script: 'npm i --force'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
          
          - task: Bash@3
            condition: and(succeeded(),eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
            displayName: "Create Build"
            inputs:
              targetType: 'inline'
              script: 'npm run build:dev'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: AzureRmWebAppDeployment@4
            condition: and(succeeded(),eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
            displayName: "Deploy to Azure WebApp"
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'xnode-spn'
              appType: 'webAppLinux'
              WebAppName: 'dev-xnode'
              packageForLinux: '$(System.DefaultWorkingDirectory)/dist/xnode'

          - task: Bash@3
            condition: and(succeeded(),eq(variables['Build.SourceBranch'], 'refs/heads/release-qa'))
            displayName: "Create Build"
            inputs:
              targetType: 'inline'
              script: 'npm run build:qa'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: AzureRmWebAppDeployment@4
            condition: and(succeeded(),eq(variables['Build.SourceBranch'], 'refs/heads/release-qa'))
            displayName: "Deploy to Azure WebApp"
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'xnode-spn'
              appType: 'webAppLinux'
              WebAppName: 'qa-xnode'
              packageForLinux: '$(System.DefaultWorkingDirectory)/dist/xnode'
            
          - task: Bash@3
            condition: and(succeeded(),eq(variables['Build.SourceBranch'], 'refs/heads/release-demo'))
            displayName: "Create Build"
            inputs:
              targetType: 'inline'
              script: 'npm run build:demo'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: AzureRmWebAppDeployment@4
            condition: and(succeeded(),eq(variables['Build.SourceBranch'], 'refs/heads/release-demo'))
            displayName: "Deploy to Azure WebApp"
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'xnode-spn'
              appType: 'webAppLinux'
              WebAppName: 'demo-xnode'
              packageForLinux: '$(System.DefaultWorkingDirectory)/dist/xnode'
            
          - task: Bash@3
            condition: and(succeeded(),eq(variables['Build.SourceBranch'], 'refs/heads/release-beta'))
            displayName: "Create Build"
            inputs:
              targetType: 'inline'
              script: 'npm run build:beta'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: AzureRmWebAppDeployment@4
            condition: and(succeeded(),eq(variables['Build.SourceBranch'], 'refs/heads/release-beta'))
            displayName: "Deploy to Azure WebApp"
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'xnode-spn'
              appType: 'webAppLinux'
              WebAppName: 'beta-xnode'
              packageForLinux: '$(System.DefaultWorkingDirectory)/dist/xnode'

          - task: Bash@3
            displayName: "Export PR ID and Update Work Item State"
            condition: succeeded()
            inputs:
              targetType: 'inline'
              script: |
                PR_ID=$(echo $(System.PullRequest.PullRequestId))
                echo "Exported PR ID: $PR_ID"
                if [ -n "$PR_ID" ]; then
                  echo "PR Merged"
                  echo "Fetching Work Items Associated with PR"

                  echo "Installing Azure DevOps CLI extension..."
                  az extension add --name azure-devops

                  echo "Configuring Azure DevOps CLI..."
                  az devops configure --defaults organization=https://dev.azure.com/Salientminds/ project=xnode

                  echo "Fetching Work Items..."
                  WORK_ITEMS=$(az repos pr work-item list --id $PR_ID --query "[].id" -o tsv)

                  for WORK_ITEM_ID in $WORK_ITEMS; do
                    echo "Processing Work Item ID: $WORK_ITEM_ID"
                    WORK_ITEM_TYPE=$(az boards work-item show --id $WORK_ITEM_ID --query "fields['System.WorkItemType']" -o tsv)
                    CURRENT_STATE=$(az boards work-item show --id $WORK_ITEM_ID --query "fields['System.State']" -o tsv)
                    echo "Work Item Type: $WORK_ITEM_TYPE, Current State: $CURRENT_STATE"
                    if [ "$CURRENT_STATE" == "Ready for Deployment" ]; then
                      if [ "$WORK_ITEM_TYPE" == "User Story" ]; then
                        az boards work-item update --id $WORK_ITEM_ID --state 'In Test'
                        echo "Updated User Story to 'In Test'"
                      elif [ "$WORK_ITEM_TYPE" == "Bug" ] || [ "$WORK_ITEM_TYPE" == "Issue" ]; then
                        az boards work-item update --id $WORK_ITEM_ID --state 'Resolved'
                        echo "Updated Bug/Issue to 'Resolved'"
                      else
                        echo "Unknown work item type: $WORK_ITEM_TYPE"
                      fi
                    else
                      echo "Work Item is not in 'Ready for Deployment' state."
                    fi
                  done
                else
                  echo "Not a PR merge, skipping work item update."
                fi
            env:
              AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)